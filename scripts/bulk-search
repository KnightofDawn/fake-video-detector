#!/bin/bash
#
# An easy way to find all existing videos that have been downloaded and run them through the 'fake-video' program.
################################################################################################

LOG_FILE="fake-movie-paths.txt"
MIN_SIZE=30M
REMOVE_FILES=0
SEARCH_LOCATION="/"
FILE_EXTENSIONS=(
    "mp4"
    "m4a"
    "avi"
    "m4v"
    "mpg"
    "mpeg"
    "wmv"
    "mkv"
)

function usage()
{
    echo -e "Usage:\n"
    echo -e "$0"
    echo -e "\t-h --help"
    echo -e "\t--search-location=\"<path>\" \t Specify the directory you would like to search - Wildcards are accepted i.e. '/nas/*/Movies'"
    echo -e "\t--remove \t\t\t If specified, will delete any files matched (DOES NOT RUN BY DEFAULT)"
    echo -e ""
}

while [ "$1" != "" ]; do
    PARAM=`echo $1 | awk -F= '{print $1}'`
    VALUE=`echo $1 | awk -F= '{print $2}'`
    case $PARAM in
        -h | --help)
            usage
            exit
            ;;
        --remove)
            REMOVE_FILES=1
            ;;
        --search-location)
            SEARCH_LOCATION=$VALUE
            ;;
        *)
            echo "ERROR: unknown parameter \"$PARAM\""
            usage
            exit 1
            ;;
    esac
    shift
done

# No need to edit below here.
################################################################################################

# Progress bar function
prog() {
    local w=50 p=$1;  shift
    printf -v dots "%*s" "$(( $p*$w/100 ))" ""; dots=${dots// /#};
    printf "\r\e[K|%-*s| %3d %% %s" "$w" "$dots" "$p" "$*";
}

NAME_ARGS=""
for i in "${FILE_EXTENSIONS[@]}"; do :
    if [[ -z "${NAME_ARGS// }" ]]; then
        NAME_ARGS="$i"
    else
        NAME_ARGS="$NAME_ARGS|$i"
    fi
done

echo -e "++ Bulk Fake Video Processor ++\n--------------------------------\n"
echo "Building file list - please be patient..."


SEARCH_COMMAND="find $SEARCH_LOCATION -type f -size +$MIN_SIZE -regextype posix-egrep -regex \".*\\.($NAME_ARGS)\$\" -print0"

process_movies=()
while IFS=  read -r -d $'\0'; do
    process_movies+=("$REPLY")
done < <(eval $SEARCH_COMMAND | sort -z )

count=0
total=`echo ${#process_movies[@]}`
echo -e "\nProcessing results:"

RED='\033[0;31m'
NC='\033[0m' # No Color

if [ "$total" -gt "100" ]; then
    SLOW_COMMENT="(this will take a while)"
fi
echo "Analyzing video in $total files $SLOW_COMMENT..."

for filename in "${process_movies[@]}"; do :

    count=$((count + 1))
    taskpercent=$((count*100/total))
    shortName="${filename##*/}"

    prog "$taskpercent" $shortName...

    if [ $REMOVE_FILES = 1 ]; then
        fake-video --silent --log --video="$filename" --remove
        exitCode=$?
    else
        fake-video --silent --log --video="$filename"
        exitCode=$?
    fi

    if [ $exitCode -eq 1 ]; then

        prog "$taskpercent" ""
        echo -e "${RED}NOTICE: File was detected as a fake${NC} [$filename]"

        if [ ! -z "$LOG_FILE" ]; then
            echo "[$filename]" >> $LOG_FILE
        fi
    fi

done

echo ""
